{"version":3,"sources":["Square.jsx","Board.jsx","Game.jsx","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","current","length","squaresCopy","calculateWinner","isXNext","setState","concat","step","status","winner","includes","console","log","moves","map","move","desc","jumpTo","handleClick","winningLines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"8NAWeA,EATA,SAACC,GACZ,OACI,wBAAQC,UAAU,SACdC,QAAWF,EAAME,QADrB,SAEKF,EAAMG,SCkEFC,E,2KA5CAC,GAAI,IAAD,OACd,OAAO,cAAC,EAAD,CACLF,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAI,EAAKF,MAAME,QAAQG,Q,+BAkBlC,OACE,gCAEE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA7DXC,IAAMC,WC2FTC,E,kDAzFb,WAAYX,GAAO,IAAD,8BACd,cAAMA,IACDY,MAAQ,CACTC,QAAQ,CAAC,CACLN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,SAAS,EACTC,WAAY,GAPF,E,wDAWNZ,GAGR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMK,WAAa,GAC9DE,EAAUN,EAAQA,EAAQO,OAAO,GACjCC,EAAW,YAAOF,EAAQZ,SAG7Be,EAAgBD,IAAgBA,EAAYhB,KAI/CgB,EAAYhB,GAAKC,KAAKM,MAAMW,QAAU,IAAM,IAC5CjB,KAAKkB,SAAS,CACVX,QAASA,EAAQY,OAAO,CAAC,CACrBlB,QAASc,KAEbJ,WAAYJ,EAAQO,OACpBG,SAAUjB,KAAKM,MAAMW,a,6BAKtBG,GACHpB,KAAKkB,SAAS,CACVP,WAAYS,EAEZH,QAAUG,EAAO,IAAO,M,+BAKtB,IAOFC,EAPC,OACCd,EAAUP,KAAKM,MAAMC,QAGrBM,EAAUN,EAAQP,KAAKM,MAAMK,YAC7BW,EAASN,EAAgBH,EAAQZ,SAInCoB,EADDC,EACO,qBAAiBA,GAChBT,EAAQZ,QAAQsB,SAAS,MAGvBvB,KAAKM,MAAMW,QAAU,iBAAmB,iBAFxC,aAKbO,QAAQC,IAAIlB,GAEZ,IAAMmB,EAAQnB,EAAQoB,KAAI,SAACP,EAAMQ,GAC7B,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACA,OACI,6BACI,wBAAQhC,QAAS,kBAAK,EAAKkC,OAAOF,IAAlC,SAA0CC,KADrCD,MAMvB,OACE,sBAAKjC,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,CACIM,QAASY,EAAQZ,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAKgC,YAAYhC,QAEvC,sBAAKJ,UAAU,YAAf,UACE,8BAAM0B,IACN,6BAAKK,c,GAlFEvB,IAAMC,WA6FvB,SAASY,EAAgBf,GAYvB,IAXA,IAAM+B,EAAe,CACjB,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGDjC,EAAI,EAAGA,EAAIiC,EAAalB,OAAQf,IAAI,CAAC,IAAD,cACtBiC,EAAajC,GADS,GACjCkC,EADiC,KAC9BC,EAD8B,KAC3BC,EAD2B,KAGxC,GAAGlC,EAAQgC,IAAMhC,EAAQgC,KAAOhC,EAAQiC,IAAMjC,EAAQgC,KAAOhC,EAAQkC,GACjE,OAAOlC,EAAQgC,GAGvB,OAAO,K,MC9GTG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ab4ca042.chunk.js","sourcesContent":["import React from 'react'\n\nconst Square = (props) => {\n    return(\n        <button className=\"square\" \n            onClick = {props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\nexport default Square","import React, {Component} from 'react'\nimport Square from './Square'\n\n\nclass Board extends React.Component {\n    // constructor(props){\n    //     super(props)\n    //     this.state = {\n    //         squares: Array(9).fill(null),\n    //         isXNext: true\n    //     }\n    // }\n\n    // handleClick(i){\n    //     const squaresCopy = [...this.state.squares]\n    //     //if there is a winner or if that box has alrdy been used(x or o) - make it unclickable\n    //     if(calculateWinner(squaresCopy) || squaresCopy[i]){\n    //         return;\n    //     }\n\n    //     squaresCopy[i] = this.state.isXNext ? \"X\" : \"O\"\n    //     this.setState({\n    //         squares: squaresCopy,\n    //         isXNext: !this.state.isXNext\n    //     })\n    // }\n\n\n    renderSquare(i) {\n      return <Square \n        value={this.props.squares[i]}\n        onClick={()=>this.props.onClick(i)} \n      />;\n    }\n\n  \n    render() {\n    //   console.log(this.state.squares)\n\n    //   const winner = calculateWinner(this.state.squares)\n    //   let status;\n    //   if(winner){\n    //       status = `Winner is: ${winner}`\n    //   } else if(!this.state.squares.includes(null)) {\n    //     status = 'GAME OVER!'\n    //   } else {\n    //     status = this.state.isXNext ? 'Next player: X' : 'Next player: O'\n    //   }\n  \n      return (\n        <div>\n          {/* <div className=\"status\">{status}</div> */}\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default Board","import React, {Component} from 'react'\nimport Board from './Board'\n\n\n  //to implement game-info time travel, need to lift up the state from board to Game\nclass Game extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            history:[{\n                squares: Array(9).fill(null)\n            }],\n            xIsNext: true,\n            stepNumber: 0,\n        }\n    }\n\n    handleClick(i){\n        // const history = this.state.history\n        //so that when user goes back to a certain point in history and clicks a new move, the previous 'future' history removed and this.state.history begins collection from this move onwards\n        const history = this.state.history.slice(0, this.state.stepNumber + 1)\n        const current = history[history.length-1]\n        const squaresCopy = [...current.squares]\n\n        //if there is a winner or if that box has alrdy been used(x or o) - make it unclickable\n        if(calculateWinner(squaresCopy) || squaresCopy[i]){\n            return;\n        }\n\n        squaresCopy[i] = this.state.isXNext ? \"X\" : \"O\"\n        this.setState({\n            history: history.concat([{\n                squares: squaresCopy\n            }]),\n            stepNumber: history.length,\n            isXNext: !this.state.isXNext\n        })\n    }\n\n\n    jumpTo(step){\n        this.setState({\n            stepNumber: step,\n            //reset whose turn when player goes back in time\n            isXNext: (step % 2) === 0\n        })\n\n    }\n\n    render() {\n        const history = this.state.history\n        // const current = history[history.length - 1]\n        //current changed to history[at which step number] so that when user jump to a previous step, react will render the view/current state of that step\n        const current = history[this.state.stepNumber]\n        const winner = calculateWinner(current.squares)\n\n        let status;\n        if(winner){\n            status = `Winner is: ${winner}`\n        } else if(!current.squares.includes(null)) {\n            status = 'GAME OVER!'\n        } else {\n            status = this.state.isXNext ? 'Next player: X' : 'Next player: O'\n        }\n\n        console.log(history)\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to Game Start'\n                return (\n                    <li key={move}>\n                        <button onClick={()=> this.jumpTo(move)}>{desc}</button>\n                    </li>\n                )\n        })\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n                squares={current.squares}\n                onClick={(i) => this.handleClick(i)}/>\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\n\n  export default Game\n\n//-------- HELPER FUNCTION -----------\n  function calculateWinner(squares){\n    const winningLines = [\n        [0,1,2],\n        [0,3,6],\n        [2,5,8],\n        [6,7,8],\n        [3,4,5],\n        [1,4,7],\n        [0,4,8],\n        [2,4,6],\n    ]\n\n    for(let i = 0; i < winningLines.length; i++){\n        const [a, b, c] = winningLines[i]\n        //first squares[a] ensure that there is a value either x or o, not null\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n            return squares[a]\n        }\n    }\n    return null;\n    \n  }\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game'\nimport './index.css';\n\n// ================REACT DOM RENDER========================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  \n"],"sourceRoot":""}